<?xml version="1.0" encoding="UTF-8"?>
<Template _uuid="uUpzaGEPkNp3dBzx11rRpA" name="database.logicunit.sqlView" is_valid="Y" note="M#">
  <Source _uuid="60]ZbPHhJJ80wmSY2jV0hw" is_valid="Y" note="M#"><![CDATA[package <jt:item source='$dataset.source_package_name'/>;

import org.mo.com.lang.*;
import org.mo.com.lang.reflect.*;
import org.mo.com.lang.type.*;
import org.mo.com.collections.*;
import org.mo.com.data.*;
import org.mo.core.aop.face.*;
import org.mo.data.logic.*;

//============================================================
// <T><jt:item source='$dataset.label'/>逻辑。</T>
//============================================================
@ASourceMachine
public class <jt:item source='$dataset.source_class_name'/>Logic extends FLogicTable
{
   // <jt:item source='$dataset.label'/>的定义。
   public final static SLogicConnectionInfo CONNECTION = new SLogicConnectionInfo("<jt:Item source='$dataset.data_group'/>");

   // <jt:item source='$dataset.label'/>的定义。
   public final static SLogicTableInfo TABLE = new SLogicTableInfo("<jt:Item source='$dataset.name'/>", "<jt:Item source='$dataset.data_name'/>");

<jt:loop source='$fields' alias='field'>
   // 字段<jt:item source='$field.label'/>的定义。
   public final static SLogicFieldInfo <jt:Item source='$field.data_name' format='upper'/> = new SLogicFieldInfo("<jt:Item source='$field.data_name'/>");

</jt:loop>
   // 字段集合的定义。
   public final static String FIELDS = "<jt:loop source='$fields' alias='field'><jt:position source='$field' type='middle' value=','/>`<jt:Item source='$field.data_name'/>`</jt:loop>";

   //============================================================
   // <T>构造<jt:item source='$dataset.label'/>逻辑单元。</T>
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Logic(){
      _name = TABLE.name();
      _classUnit = <jt:item source='$dataset.source_class_name'/>Unit.class;
<jt:notEmpty source='$dataset.logic_timeout'>
      _timeout = <jt:Item source='$dataset.logic_timeout'/>;
</jt:notEmpty>
   }

   //============================================================
   // <T>构造<jt:item source='$dataset.label'/>逻辑单元。</T>
   //
   // @param context 逻辑环境
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Logic(ILogicContext context){
      super(context);
      _name = TABLE.name();
      _classUnit = <jt:item source='$dataset.source_class_name'/>Unit.class;
<jt:notEmpty source='$dataset.logic_timeout'>
      _timeout = <jt:Item source='$dataset.logic_timeout'/>;
</jt:notEmpty>
   }

   //============================================================
   // <T>获得数据链接信息。</T>
   //
   // @return 数据链接
   //============================================================
   @Override
   public SLogicConnectionInfo connectionInfo(){
      return CONNECTION;
   }

   //============================================================
   // <T>获得数据集合信息。</T>
   //
   // @return 数据集合链接
   //============================================================
   @Override
   public SLogicTableInfo tableInfo(){
      return TABLE;
   }

   //============================================================
   // <T>获得字段集合字符串。</T>
   //
   // @return 字段集合字符串
   //============================================================
   @Override
   public String fieldsInfo(){
      return FIELDS;
   }

   //============================================================
   // <T>创建一个空数据单元。</T>
   //
   // @return 数据单元
   //============================================================
   @Override
   @SuppressWarnings("unchecked")
   protected <T extends FLogicUnit> T innerCreateUnit(){
      return (T)new <jt:item source='$dataset.source_class_name'/>Unit();
   }

   //============================================================
   // <T>创建一个空数据集合。</T>
   //
   // @return 数据集合
   //============================================================
   @Override
   @SuppressWarnings("unchecked")
   protected <T extends FLogicUnit> FLogicDataset<T> innerCreateDataset(){
      return (FLogicDataset<T>)new FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit>(<jt:item source='$dataset.source_class_name'/>Unit.class, _logicContext);
   }

   //============================================================
   // <T>根据唯一编号获得一个数据单元。</T>
   //
   // @param guid 唯一编号
   // @return 数据单元
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit findByGuid(CharSequence guid){
      return findByGuid(null, <jt:item source='$dataset.source_class_name'/>Unit.class, guid);
   }

   //============================================================
   // <T>根据条件获得一个数据单元。</T>
   //
   // @param whereSql 条件
   // @return 数据单元
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit search(CharSequence whereSql){
      return search(null, <jt:item source='$dataset.source_class_name'/>Unit.class, whereSql);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence whereSql){
      return fetchClass(null, null, whereSql, null, null, -1, 0);
   }

   //============================================================
   // <T>获得数据单元集合。</T>
   //
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(int pageSize, int page){
      return fetchClass(null, null, null, null, null, pageSize, page);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence whereSql, int pageSize, int page){
      return fetchClass(null, null, whereSql, null, null, pageSize, page);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence whereSql, CharSequence orderSql){
      return fetchClass(null, null, whereSql, null, orderSql, -1, 0);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence whereSql, CharSequence orderSql, int pageSize, int page){
      return fetchClass(null, null, whereSql, null, orderSql, pageSize, page);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param fields 选取字段
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence fields, CharSequence whereSql, CharSequence orderSql, int pageSize, int page){
      return fetchClass(null, fields, whereSql, null, orderSql, pageSize, page);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param fields 选取字段
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetch(CharSequence fields, CharSequence whereSql, CharSequence groupSql, CharSequence orderSql, int pageSize, int page){
      return fetchClass(null, fields, whereSql, groupSql, orderSql, pageSize, page);
   }

   //============================================================
   // <T>根据查询命令获得数据单元集合。</T>
   //
   // @param code 代码
   // @param sql 查询命令
   // @param pageSize 分页大小
   // @param page 分页号码
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetchSql(CharSequence code, CharSequence sql, int pageSize, int page){
      return fetchSql(null, code, sql, pageSize, page);
   }

   //============================================================
   // <T>获得全部数据单元集合。</T>
   //
   // @return 数据单元集合
   //============================================================
   public FLogicDataset<<jt:item source='$dataset.source_class_name'/>Unit> fetchAll(){
      // 生成命令
      String code = "null|null|null";
      String sql = makeFetchSql(null, null, null, null, 0, 0);
      // 获得数据
      return fetchSql(null, code, sql, 0, 0);
   }

   //============================================================
   // <T>准备一个数据单元。</T>
   //
   // @return 数据单元
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit doPrepare(){
      <jt:item source='$dataset.source_class_name'/>Unit unit = new <jt:item source='$dataset.source_class_name'/>Unit();
      unit.linkLogicContext(_logicContext);
      doPrepare(unit);
      return unit;
   }

   //============================================================
   // <T>准备一个数据单元。</T>
   //
   // @param logicUnit 数据单元
   // @return 处理结果
   //============================================================
   @Override
   public EResult doPrepare(FLogicUnit logicUnit){
      <jt:item source='$dataset.source_class_name'/>Unit unit = (<jt:item source='$dataset.source_class_name'/>Unit)logicUnit;
      unit.setOvld(true);
      unit.setGuid(RUuid.makeUniqueId());
      return EResult.Success;
   }

   //============================================================
   // <T>插入一个数据单元。</T>
   //
   // @param logicUnit 数据单元
   // @return 处理结果
   //============================================================
   @Override
   public EResult doInsert(FLogicUnit logicUnit){
      <jt:item source='$dataset.source_class_name'/>Unit unit = (<jt:item source='$dataset.source_class_name'/>Unit)logicUnit;
      long ouid = unit.ouid();
      // 设置操作用户
      if((unit.createUserId() == 0)|| (unit.updateUserId() == 0)){
         long operatorId = currentOperatorId();
         if(unit.createUserId() == 0){
            unit.setCreateUserId(operatorId);
         }
         if(unit.updateUserId() == 0){
            unit.setUpdateUserId(operatorId);
         }
      }
      // 生成命令
      FSql cmd = new FSql("INSERT INTO ");
      cmd.append(_name);
      cmd.append("(");
      if(ouid > 0){
         cmd.append("`OUID`,");
      }
      cmd.append("`OVLD`");
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD'>
      cmd.append(",`<jt:item source='$field.data_name'/>`");
</jt:notEquals>
</jt:loop>
      cmd.append(") VALUES(");
      if(ouid > 0){
         cmd.appendLong(ouid);
         cmd.append(',');
      }
      cmd.append(unit.ovld());
<jt:loop source='$fields' alias='field'>
<jt:equals source='$field.data_name' value='GUID'>
      String guid = unit.guid();
      if(RString.isEmpty(guid)){
         guid = RUuid.makeUniqueId();
      }
      cmd.append(',');
      cmd.append('\'');
      cmd.append(guid);
      cmd.append('\'');
</jt:equals>
</jt:loop>
<jt:loop source='$fields' alias='field'>
<jt:equals source='$field.data_name' value='GVID'>
      String gvid = unit.gvid();
      if(RString.isEmpty(gvid)){
         gvid = RUuid.makeUniqueId();
      }
      cmd.append(',');
      cmd.append('\'');
      cmd.append(gvid);
      cmd.append('\'');
</jt:equals>
</jt:loop>
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD|GUID|GVID|CREATE_USER_ID|CREATE_DATE|UPDATE_USER_ID|UPDATE_DATE'>
      cmd.append(',');
<jt:equals source='$field.type' value='RecordId'>
      long <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
      if(<jt:Item source='$field.data_name' format='method'/> == 0){
         cmd.append("NULL");
      }else{
         cmd.append(<jt:Item source='$field.data_name' format='method'/>);
      }
</jt:equals>
<jt:equals source='$field.type' value='Boolean|Integer|Long|Float|Double'>
      cmd.append(unit.<jt:item source='$field.data_name' format='method'/>());
</jt:equals>
<jt:equals source='$field.type' value='Date|Time|DateTime'>
      <jt:item source='$field.java_type'/> <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
      if(<jt:Item source='$field.data_name' format='method'/> == null){
         cmd.append("NULL");
      }else if(<jt:Item source='$field.data_name' format='method'/>.isEmpty()){
         cmd.append("NULL");
      }else{
         cmd.append("STR_TO_DATE('");
         cmd.append(<jt:Item source='$field.data_name' format='method'/>.format());
         cmd.append("','%Y%m%d%H%i%s')");
      }
</jt:equals>
<jt:equals source='$field.type' value='Char|String|Content'>
      String <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
      if(RString.isEmpty(<jt:Item source='$field.data_name' format='method'/>)){
         cmd.append("NULL");
      }else{
         cmd.append('\'');
         cmd.append(RSql.formatValue(<jt:Item source='$field.data_name' format='method'/>));
         cmd.append('\'');
      }
</jt:equals>
</jt:notEquals>
</jt:loop>
      // 设置更新信息
      cmd.append("," + unit.createUserId());
      if(unit.createDate().isEmpty()){
         cmd.append(",NOW()");
      }else{
         cmd.append(",STR_TO_DATE('");
         cmd.append(unit.createDate().format());
         cmd.append("','%Y%m%d%H%i%s')");
      }
      cmd.append("," + unit.updateUserId());
      if(unit.updateDate().isEmpty()){
         cmd.append(",NOW()");
      }else{
         cmd.append(",STR_TO_DATE('");
         cmd.append(unit.updateDate().format());
         cmd.append("','%Y%m%d%H%i%s')");
      }
      cmd.append(')');
      // 执行命令
      String sql = cmd.toString();
      long recordId = innerInsertSql(sql);
      unit.setOuid(recordId);
      // 删除缓冲
      innerDeleteRow(recordId);
      return EResult.Success;
   }

   //============================================================
   // <T>更新一个数据单元。</T>
   //
   // @param logicUnit 数据单元
   // @return 处理结果
   //============================================================
   @Override
   public EResult doUpdate(FLogicUnit logicUnit){
      <jt:item source='$dataset.source_class_name'/>Unit unit = (<jt:item source='$dataset.source_class_name'/>Unit)logicUnit;
      // 检查参数
      if(unit == null){
         throw new FFatalError("Logic unit is null.");
      }
      // 更新处理
      return doUpdate(unit, unit.ouid());
   }

   //============================================================
   // <T>更新一个数据单元。</T>
   //
   // @param logicUnit 数据单元
   // @param recordId 记录编号
   // @return 处理结果
   //============================================================
   @Override
   public EResult doUpdate(FLogicUnit logicUnit,
                           long recordId){
      <jt:item source='$dataset.source_class_name'/>Unit unit = (<jt:item source='$dataset.source_class_name'/>Unit)logicUnit;
      // 检查参数
      if(unit == null){
         throw new FFatalError("Logic unit is null.");
      }
      if(recordId <= 0){
         throw new FFatalError("Record id is empty. (record_id={1})", recordId);
      }
      // 删除缓冲
      innerDeleteRow(recordId);
      // 设置操作用户
      if(unit.updateUserId() == 0){
         long operatorId = currentOperatorId();
         unit.setUpdateUserId(operatorId);
      }
      // 生成命令
      FSql cmd = new FSql("UPDATE ");
      cmd.append(_name);
      cmd.append(" SET OVLD=");
      cmd.append(unit.ovld());
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD|GUID|CREATE_USER_ID|CREATE_DATE|UPDATE_USER_ID|UPDATE_DATE'>
      if(unit.is<jt:item source='$field.data_name' format='class'/>Changed()){
         cmd.append(",`<jt:item source='$field.data_name'/>`=");
<jt:equals source='$field.type' value='RecordId'>
         long <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
         if(<jt:Item source='$field.data_name' format='method'/> == 0){
            cmd.append("NULL");
         }else{
            cmd.append(<jt:Item source='$field.data_name' format='method'/>);
         }
</jt:equals>
<jt:equals source='$field.type' value='Boolean|Integer|Long|Float|Double'>
         cmd.append(unit.<jt:item source='$field.data_name' format='method'/>());
</jt:equals>
<jt:equals source='$field.type' value='Date|Time|DateTime'>
         <jt:item source='$field.java_type'/> <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
         if(<jt:Item source='$field.data_name' format='method'/> == null){
            cmd.append("NULL");
         }else if(<jt:Item source='$field.data_name' format='method'/>.isEmpty()){
            cmd.append("NULL");
         }else{
            cmd.append("STR_TO_DATE('");
            cmd.append(<jt:Item source='$field.data_name' format='method'/>.format());
            cmd.append("','%Y%m%d%H%i%s')");
         }
</jt:equals>
<jt:equals source='$field.type' value='Char|String|Content'>
         String <jt:Item source='$field.data_name' format='method'/> = unit.<jt:item source='$field.data_name' format='method'/>();
         if(RString.isEmpty(<jt:Item source='$field.data_name' format='method'/>)){
            cmd.append("NULL");
         }else{
            cmd.append('\'');
            cmd.append(RSql.formatValue(<jt:Item source='$field.data_name' format='method'/>));
            cmd.append('\'');
         }
</jt:equals>
      }
</jt:notEquals>
</jt:loop>
      cmd.append(",UPDATE_USER_ID=" + unit.updateUserId() + ",UPDATE_DATE=NOW()");
      cmd.append(" WHERE OUID=");
      cmd.append(recordId);
      // 执行命令
      return innerExecuteSql(cmd);
   }

   //============================================================
   // <T>删除一个数据单元。</T>
   //
   // @param logicUnit 数据单元
   // @return 处理结果
   //============================================================
   @Override
   public EResult doDelete(FLogicUnit logicUnit){
      <jt:item source='$dataset.source_class_name'/>Unit unit = (<jt:item source='$dataset.source_class_name'/>Unit)logicUnit;
      // 检查参数
      if(unit == null){
         throw new FFatalError("Logic unit is null.");
      }
      // 更新处理
      return doDelete(unit, unit.ouid());
   }
}
]]></Source>
</Template>
